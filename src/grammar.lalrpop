use std::str::FromStr;
use crate::common::*;
use crate::term::Builtin;
use crate::error::{Spanned, Span};

grammar;

pub STerm: Spanned<ParseTree<'input>> = Spanned<Term>;

Spanned<T>: Spanned<T> = {
    <l:@L> <t:T> <r:@R> => Spanned::new(t, Span(l, r)),
};

Term: ParseTree<'input> = {
    Let,
    Fun,
    The,
    Binder,
    <f:Spanned<Atom>> <x:Spanned<Atom>> => ParseTree::App(f, x),
    Atom,
}

The: ParseTree<'input> = {
    "the" <t:Spanned<Atom>> <u:Spanned<Atom>> => ParseTree::The(t, u),
}

Binder: ParseTree<'input> = {
    <x:Var> ":" <t:STerm?> => ParseTree::Binder(x, t),
}

Let: ParseTree<'input> = {
    "let" <x:Var> "=" <t:STerm> "in" <u:STerm> => ParseTree::Let(x, t, u),
}

Pat: ParseTree<'input> = {
    Binder,
    Atom,
}

Fun: ParseTree<'input> = {
    "fn" <a:Spanned<Pat>> "=>" <b:STerm> => ParseTree::Fun(a, b),
}

Atom: ParseTree<'input> = {
    "()" => ParseTree::Unit,
    "(" <a:STerm> "," <b:STerm> ")" => ParseTree::Pair(a, b),
    Builtin => ParseTree::Builtin(<>),
    "Type" => ParseTree::Type,
    <i:Int> => ParseTree::I32(i),
    <v:Var> => ParseTree::Var(v),
    "(" <Term> ")",
}

Builtin: Builtin = {
    "Int" => Builtin::Int,
}

Var: &'input str = r"[A-Za-z_][A-Za-z_0-9]*";
Int: i32 = <s:r"[0-9]+"> => i32::from_str(s).unwrap();
