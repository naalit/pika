# This is a redesign of the Pika language
# Problems with the old design:
# - Functions being types is weird, and the omnipresent subtyping it creates is annoying
#   - Putting a `:` after function parameter names is confusing and annoying
#   - With function syntax in general, I don't really like using lambdas for named functions (I prefer ML, Haskell, Scheme's `f x y = ...`)
#   - Also, the lambda syntax was too long for using in normal lambdas
# - The whitespace sensitivity had various problems
# - It didn't have a satisfying way to determine when (mutual) recursion was allowed
#   - Also, you couldn't capture local variables in recursive functions. This is annoying in Rust too.
# - It was planning on using dependent records for modules, but record types weren't actually dependent
#
# Pika had always been pretty ML-like, but in this redesign it's now even more so.
# A lot of the things this redesign replaces, especially syntax, were just replaced with the Standard ML equivalent.
# Of course, it's still a lot simpler than SML, since with dependent types we can get rid all sorts of things, like type parameters or functors.

# Here's some example code:
# (Note that comments still start with #, and there aren't multiline comments)

# Pika no longer has universes, instead Type : Type.
# In fact, Pika no longer has any subtyping at all!
val x : Type = Type
# I'm not 100% sure about this lambda syntax, but it's fine for now.
# Note that function types are just like SML or Haskell now.
val y : Int -> Int = \x. x + 1

# Unlike other MLs or Haskell, Pika doesn't have multi-clause functions.
# Instead, use case-of.
# Another thing to note here is that case-of uses newlines and `end`, not | and not significant indentation.
fun fib (i: Int) : Int = case i of
  0 | 1 => 1
  i => fib (i - 1) + fib (i - 2)
end

# One-line functions work, of course, as does type inference.
# This is *probably* inferred as `val square : [t] [m: Mul t t] t -> m.Output`, like Haskell would.
fun square x = x * x

# We don't have let-in, we use do-end which works like a Rust block.
fun fact i = do
  # We can define locals, functions, datatypes, etc. in here.
  fun go i acc = if i <= 1
    then acc
    else go (i - 1) (i * acc)

  # do-end is also used for running multiple expressions for side effects.
  # It's much nicer than the weird semicolons in parentheses most MLs use.
  print "Running factorial"

  # It returns the last expression.
  go i 1
end

# Typeclasses are just ML-style parametrized modules, usually passed implicitly.
# And of course, parametrized modules are just functions, and so are parametrized ("generic") types.
fun Functor (f: Type -> Type) = sig
  # We put implicit parameters in square brackets.
  # These are both inferred to have type `Type`.
  val fmap : [a b] (a -> b) -> f a -> f b
end

# Records are structural, and types are values.
# So, this is a type alias.
val Q : Type = sig
  fun f (x : Int) : Int
end
# You can use curly braces as a shorthand for either a sig or struct with only `val`s
val u : Q = { f = y }

# ADTs don't use ML syntax, they look pretty different, more like Haskell
type Option t of
  # val None : [t] -> Option t
  None
  # val Some : [t] t -> Option t
  Some t
# This `where` starts the optional "associated module" for the datatype
# Constructors go in the associated module even if there isn't a where clause
where
  fun unwrap_or default self = case self of
    # We can see the constructors since we're in the associated module with them
    None => default
    Some x => x
  end
end
# If an implicit can't be solved by unification, we look for "implicit values" of the right type.
# Implicit values are declared with `impl`, and work like Scala 3's given instances.
# For one to be resolved implicitly, it must be the only implicit value of that type in scope.
impl Functor Option = struct
  fun fmap f x = case x of
    # Out here the constructors aren't in the global scope, so we need the dot
    Option.None => Option.None
    Option.Some x => Option.Some (f x)
  end
end


# Algebraic effects
# Pika has algebraic effects, which can take two forms.
# This is a function that uses the `IO` effect:
# (note that the `with IO` would have been inferred if it wasn't written)
fun f () with IO = do
  print "Hello, world!"
end
# Effects can also exist in free-monad form, as an instance of this type:
type Eff r e of
  Return r
  # This has a value of `e a` (which is probably a GADT) and a continuation with an `a` arguent.
  Eff [a] (e a) (a -> Eff r e)
end
# We can define the IO effect like so:
type IO a of
  # () has type Unit
  Print String : IO Unit
  # This returns a String (its continuation takes a String).
  Input : IO String
end
# We can convert between "frozen" free-monad effects and "active" effects that propagate through functions with `raise` and `catch`:
fun print (s : String) : Unit with IO = do
  raise (IO.Print s)
end
# If we just didn't give a `with` clause, it would be inferred, so marking it `pure` helps us be sure our function gets the right type.
fun run_pure [r] (f : Unit -> r with IO) : r pure = handler (catch (f ()))
fun handler [r] (x : Eff r IO) : r pure = do
  case x of
    Eff.Return x => x
    # We'll ignore the output.
    # Note that the continuation doesn't need to be caught again.
    Eff.Eff (IO.Print _) k => handler  (k ())
    # And we'll always input "yes"
    Eff.Eff (IO.Input) k = handler (k "yes")
  end
end

# One more thing with effects: higher-order functions are implicitly effect polymorphic, like Frank (see the paper "do be do be do").
# This is true even when the function isn't otherwise polymorphic.
fun apply_to_3 (f : Int -> Int) = f 3
apply_to_3 \x. do
    print (to_string x)
    x + 2
  end
# Again, you can specify effects, or `pure`, on function types.
fun run [r] (f : Unit -> r with IO) : r with IO = f ()


# We can use dependent types to make a `printf`-like function!
# We insert `with IO` on every curried function boundary, it might not be true but it's easier and still sound.
fun nfmtargs ret (n : U32) : Type = case n of
  0 => ret
  # This requires a Display instance for t. Note that [: t] is equivalent to [_ : t]
  Suc n => [t] [: Display t] t -> nfmtargs ret n with IO
end
fun printf (s : String) : nfmtargs Unit (s.count "{}") with IO = do
  fun printf_impl buf l : nfmtargs Unit (l.len) with IO = case l of
    Nil => _ffi.puts buf
    Cons s l => do
      # `s` should go after `x`
      # Note that all functions are closures
      fun f x = printf_impl (x.fmt buf ++ s) l
      f
    end
  end
  # Since types have "associated modules", we use them for method resolution (no more `List.sort list`!)
  # Since functions are curried, the "self" parameter is last.
  val l = s.split "{}"
    # Note that this isn't significant indentation, just a leading dot, which is unambiguous!
    # Also, you can give implicit parameters explicitly with square brackets.
    # Finally, the `_` introduces a hole, i.e. it asks the typechecker to fill in that parameter.
    .collect [List _]
  printf_impl (l.head.unwrap_or "") (l.tail.unwrap_or Nil)
end

# val greet : [t] [: Display t] t -> () with IO
fun greet s = do
  printf "Hello, {}" s
end
