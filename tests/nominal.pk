# Single-constructor
type Point of New struct
  x := Int
  y := Int
# Multi-constructor
type Term of
  Var Int
  Lam Int Int
  App Int Int
# GADT, almost
type Pair : fun Type => Type of
  MkPair : fun (a:Type) a a => Pair a
# Nullary constructor
type Bool of
  True
  False

is_zero : fun Int => Bool
 = fun i: => case i of
   0 => Bool.True
   _ => Bool.False

not : fun Bool => Bool
  = fun b: => case b of
    Bool.True => Bool.False
    Bool.False => Bool.True

to_int : fun Bool => Int
  = fun b: => case b of
    Bool.True => 1
    Bool.False => 0

sum : fun Term => Int
  = fun t: => case t of
    Term.Var i => i
    Term.App a b => a + b
    Term.Lam a b => a + b

# (7, 0)
main := (sum (Term.App 3 4)) + (to_int (not (is_zero 0)))
