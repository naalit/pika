# Computes fibonacci with Church numbers to stress-test the GC
val Nat = (t: Type) -> (t -> t) -> t -> t

val zero : Nat = _ f x => x
val one : Nat = _ f x => f x

fun iszero (n : Nat) : Bool = n _ (_ => False) True

fun suc (n : Nat) : Nat = t f x => f (n t f x)
fun add (a : Nat) (b : Nat) : Nat = a _ suc b
fun mul (a : Nat) (b : Nat) : Nat = a _ (add b) zero

type Pair a b of New a b end
fun fst [a b] (p : Pair a b) : a = case p of
    Pair.New x _ => x
end

fun the t x : t = x
fun pred (n : Nat) : Nat = fst (n (Pair Nat Nat) (p => case p of
        Pair.New _a b => Pair.New b (suc b)
    end) (Pair.New zero zero))

fun nat_to_int (n : Nat) : I32 = n _ (x => x + 1) 0
fun int_to_nat (i : I32) : Nat = if i == 0 then zero else suc (int_to_nat (i - 1))

fun fib (i : Nat) : Nat with IO = if iszero (pred i) then one else add (fib (pred i)) (fib (pred (pred i)))

fun main () with IO = do
    # Currently LLVM can't do tail calls on GC statepoints, so a number higher than 12 causes a stack overflow
    val n : Nat = fib (int_to_nat 12)
    val i = nat_to_int n
    print i
end
