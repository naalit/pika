# This is a more realistic test using coroutines
# It involves changing the effect continuation each time, and should print out 0-6
eff Yield a of
    Y a : ()

fun generator () with Yield I32 = do
    # TODO we shouldn't need the explicit [I32] here
    Yield.Y [I32] 1
    Yield.Y [I32] 3
    Yield.Y [I32] 5

type Coroutine a of
    Go a (() -> Coroutine a)
    Stop
where
    fun new [a] (gen : () -> () with Yield a) : Coroutine a = catch gen () of
        () => Stop
        eff (Yield.Y x) k => Go x k

    ## Steps the coroutine, and if it yields a value, calls `run` on it. Otherwise it's done, and this function does nothing.
    ## Returns the new coroutine.
    fun step [a] (x : Coroutine a) (run : a -> () with IO) : Coroutine a with IO = case x of
        Stop => Stop
        Go a k => do
            run a
            k ()

fun main () with IO = do
    let k = Coroutine.new generator
    print 0
    let k = k.step print
    print 2
    let k = k.step print
    print 4
    let k = k.step print
    print 6
    # This shouldn't print anything, because the coroutine is done
    k.step print
