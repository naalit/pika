type DoNotCopy of
    New(I32)

fun copy_ref (x: &DoNotCopy): (&DoNotCopy, &DoNotCopy) = (x, x)
fun move_once (x: DoNotCopy): DoNotCopy = x
fun reference (x: DoNotCopy): &DoNotCopy = x
fun move_twice (x: DoNotCopy): (DoNotCopy, DoNotCopy) = (x, x)
fun in_block (x: DoNotCopy): (DoNotCopy, DoNotCopy) = do
    let y = x
    (y, x)
fun borrowed (x: DoNotCopy): (&DoNotCopy, DoNotCopy) = (x, x)
fun borrowed2 (x: DoNotCopy): (DoNotCopy, &DoNotCopy) = (x, x)
fun borrowed3 (x: DoNotCopy): () = do
    let y: &DoNotCopy = x
    let z: DoNotCopy = x
    let w: &DoNotCopy = y

fun borrow_move(x: &DoNotCopy, y: DoNotCopy): DoNotCopy = y
fun same_variable(x: DoNotCopy): DoNotCopy = borrow_move(x, x)
fun shadow(x: &DoNotCopy, y: DoNotCopy): DoNotCopy = do
    let z = y
    borrow_move(x, z)

type Ref[a] of
    Ref(&a)

fun borrow_move_s(x: Ref[DoNotCopy], y: DoNotCopy): DoNotCopy = y
fun borrow_move_s2(x: &Ref[DoNotCopy], y: DoNotCopy): DoNotCopy = y
fun same_variable_s(x: DoNotCopy): DoNotCopy = do
    let r = Ref.Ref(x)
    borrow_move_s(r, x)
fun shadow_s(x: Ref[DoNotCopy], y: DoNotCopy): DoNotCopy = do
    let r = Ref.Ref(y)
    let z = y
    borrow_move_s(x, z)
fun same_variable_s2(x: DoNotCopy): DoNotCopy = do
    let r = Ref.Ref(x)
    borrow_move_s2(r, x)

fun degrade(x: &mut DoNotCopy): &DoNotCopy = x
fun upgrade(x: &DoNotCopy): &mut DoNotCopy = x
fun make_mut(mut x: DoNotCopy): &mut DoNotCopy = x
fun borrow_r(x: DoNotCopy): (&DoNotCopy, &DoNotCopy) = (x, x)
fun borrow_m(mut x: DoNotCopy): (&mut DoNotCopy, &mut DoNotCopy) = (x, x)
fun borrow_c(mut x: DoNotCopy): (&mut DoNotCopy, &DoNotCopy) = (x, x)
fun borrow_d(mut x: DoNotCopy): (&DoNotCopy, &mut DoNotCopy) = (x, x)

fun copy(mut x: I32): I32 = do
    let y: I32 = x
    let z: &mut I32 = x
    y

fun deref(x: &mut DoNotCopy): DoNotCopy = *x
fun deref_copy(x: &mut I32): I32 = *x

fun assign_imm(mut x: &I32): () = *x = 3
fun assign_imm_chain1(mut x: &&mut I32): () = **x = 4
fun assign_imm_chain2(mut x: &mut &I32): () = **x = 5
fun assign_imm_chain2(x: &mut I32): () = *x = 5
fun assign_imm_var(x: I32): () = x = 3
fun assign_var(mut x: &mut I32, mut y: &mut I32): I32 = do
    let a: I32 = 3
    let mut b = 4
    b = a
    *x = 6
    *y = *x
    y = x
    *y

fun leaser(x: &mut I32): &mut I32 = x
fun lease(x: &mut I32): &mut I32 = do
    leaser(x)
    x
fun lease_err(x: &mut I32): &mut I32 = do
    let y = leaser(x)
    leaser(x)
    y

fun magic1(x: &mut DoNotCopy, y: &mut DoNotCopy): () = () # theoretically this could put (mutable) references in y into x
fun magic2(x: &mut DoNotCopy, mut y: DoNotCopy): &mut DoNotCopy = do
    magic1(x, y) # now y could be mutably borrowed
    borrow_move(x, y) # so this should be illegal
    x

# Merging reference invalidations across case branches
fun move(x: DoNotCopy): () = ()
fun borrow(x: &DoNotCopy): () = ()
fun mutate(x: &mut DoNotCopy): () = ()
fun good(a: I32, x: DoNotCopy): () = case a of
    1 => move(x)
    _ => move(x) # fine, the other move was in another branch
fun bad(a: I32, x: DoNotCopy) = do
    case a of
        0 => ()
        1 => move(x)
        _ => ()
    move(x) # not allowed, x may have been moved
fun bad2(a: I32, x: DoNotCopy, y: DoNotCopy): &DoNotCopy = do
    let q = case a of
        0 => y
        _ => x
    move(x) # whether this moves x or y, it invalidates q either way
    q
type Cow[a] of
    Own(a)
    Borrow(&a)
fun bad3(a: I32, x: DoNotCopy): Cow[DoNotCopy] = do
    let q = case a of
        0 => Cow.Own(x)
        _ => Cow.Borrow(x)
    borrow(x) # not allowed, x might be moved
    q

fun h_own(f: () -> ()) = ()
fun h_ref(f: () &-> ()) = ()
fun h_mut(f: () &mut -> ()) = ()

fun problems1(x: DoNotCopy): () = do
    let f = () => move(x)
    f()
    f()
fun problems2(mut x: DoNotCopy): () = h_mut(() => move(x))
fun problems3(mut x: DoNotCopy): () = h_ref(() => mutate(x))
fun problems4(f: () &mut -> ()): () = h_ref(f)

# tests for new rules about closures returning borrows from their environment
fun return_borrow1(x: &mut DoNotCopy): () &mut -> &mut DoNotCopy = () => x
fun return_borrow2(mut x: &mut DoNotCopy): () &mut -> &DoNotCopy = () => do
    let _ = x = DoNotCopy.New(3)
    let y: &DoNotCopy = x
    y
