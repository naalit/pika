# This is about everything that works so far!

val AType = Type -> Type
val M : Type -> AType = x y => x
val Z : M Type Type = Type
val Q = Z

val U : Type = Type

fun the (x: Type) (y: x) : x = y

# We can do basic type inference now
val g = the Type Type

# Infering the argument type
fun id_type x : Type = x

# We can now infer the type of this implicit argument
fun id [t] (x: t) = x

# Implicit parameters are passed implicitly
val x = id Type

# Pika is now pretty flexible about newlines, so this works:
# val y : Type -> Type = x => x
val
  y
    : Type -> Type
    =
      x => x

fun local (_:Type) = do
  fun f x = the Type x
  val t = Type -> Type
  f t

@[elaborate]
@[normalize]
val test : [t] t -> t = id id
