# These are examples from the smalltt demo, to make sure the Pika typechecker does the right thing
# Also for benchmarking, but that doesn't exist yet
# Note that it uses lambdas instead of `fun` since that's what smalltt does
# Also, Pika doesn't allow unicode lambdas and arrows, and I removed the unicode names too

# Basics
# --------------------------------------------------------------------------------

# We have type-in-type:
val typeInType : Type = Type

# polymorphic identity, A has inferred type U
val id : [A] -> A -> A = x => x

# We don't have any way to stop meta insertion right now
# # by default metas are inserted for implicit arguments, but
# # (!) can be used to stop insertion at any point. The (id!) expression
# #  has a polymorphic type, {A} → A → A
# id2 : {A} → A → A = id (id!)

val id3 : [A] -> A -> A = x => id x

# explicit id function can be used for type annotation
# as in Idris
val the : (A : _) -> A -> A = _ x => x

# This isn't in smalltt's demo, but it works there too
val id4 : [A] -> A -> A = x => the _ x

# top-level definition types can be omitted
val constTy = [A B] -> A -> B -> A

val const : constTy = x y => x

# We don't allow named implicit application right now either
# # implicit application follows Agda convention.
# namedArgTest  = const {B = U} U
# namedArgTest2 = the constTy (λ x y. x) {B = U} U

# Again, no !
# # the following has inferred type {B : U} → U → B → U
# # because of (!)
# constU = const {U} !


# Church bools
# --------------------------------------------------------------------------------
val Bool = (B : Type) -> B -> B -> B
val true  : Bool = _ t f => t
val false : Bool = _ t f => f

# 'and' is a reserved word in Pika
val and2 : Bool -> Bool -> Bool
  = b1 b2 => b1 Bool true b2

# Church natural numbers
# --------------------------------------------------------------------------------
val Nat : Type
  = (n : Type) -> (n -> n) -> n -> n

val zero : Nat
  = n s z => z

val suc : Nat -> Nat
  = a n s z => s (a n s z)

val n2 : Nat = n s z => s (s z)
val n5 : Nat = n s z => s (s (s (s (s z))))

val mul : Nat -> Nat -> Nat
  = a b n s z => a n (b n s) z

val add : Nat -> Nat -> Nat
  = a b n s z => a n s (b n s z)

val n10    = mul n2    n5
val n10b   = mul n5    n2
val n100   = mul n10   n10
val n100b  = mul n10b  n10b
val n10k   = mul n100  n100
val n10kb  = mul n100b n100b
val n100k  = mul n10k  n10
val n100kb = mul n10kb n10b
val n1M    = mul n10k  n100
val n1MB   = mul n10kb n100b
val n10M   = mul n1M   n10
val n10MB  = mul n1MB  n10b
val n100M  = mul n10M  n10
val n200M  = mul n2    n100M

# Church lists
# --------------------------------------------------------------------------------
val List  : Type -> Type = a => (l : Type) -> (a -> l -> l) -> l -> l
val lnil  : [a] -> List a = l c n => n
val lcons : [a] -> a -> List a -> List a = a as l c n => c a (as l c n)

val list1 = lcons true (lcons false (lcons false lnil))

val map : [a b] -> (a -> b) -> List a -> List b
  = f as l c => as l (a => c (f a))

# Church vectors
# --------------------------------------------------------------------------------
val Vec : Type -> Nat -> Type
  = a n => (V : Nat -> Type) -> V zero -> ([n] -> a -> V n -> V (suc n)) -> V n

val vnil : [a] -> Vec a zero
  = V n c => n

val vcons : [a n] -> a -> Vec a n -> Vec a (suc n)
  = a as V n c => c a (as V n c)

val vec1 = vcons true (vcons false (vcons true vnil))


# Note: putting [elaborate] after a top-level name will cause
# elaboration time for that entry to be displayed on load.


# Type checking vecStress:
# smalltt : 19ms  , 6.3 MB
# Coq     : 300ms , 280 MB
# Agda    : ~3s   , 330 MB
# ------------------------
# smalltt : 37ms
# Pika    : 67ms
# @[elaborate]
# val vecStress =
#    (vcons true (vcons true (vcons true (vcons true (vcons true (vcons true
#    (vcons true (vcons true (vcons true (vcons true (vcons true (vcons true
#    (vcons true (vcons true (vcons true (vcons true (vcons true (vcons true
#    (vcons true (vcons true (vcons true (vcons true (vcons true (vcons true
#    (vcons true (vcons true (vcons true (vcons true (vcons true (vcons true
#    (vcons true (vcons true (vcons true (vcons true (vcons true (vcons true
#    (vcons true (vcons true (vcons true (vcons true (vcons true (vcons true
#    (vcons true (vcons true (vcons true (vcons true (vcons true (vcons true
#    (vcons true (vcons true (vcons true (vcons true (vcons true (vcons true
#    (vcons true (vcons true (vcons true (vcons true (vcons true (vcons true
#    (vcons true (vcons true (vcons true (vcons true (vcons true (vcons true
#    (vcons true (vcons true (vcons true (vcons true (vcons true (vcons true
#    (vcons true (vcons true (vcons true (vcons true (vcons true (vcons true
#    (vcons true (vcons true (vcons true (vcons true (vcons true (vcons true
#    (vcons true (vcons true (vcons true (vcons true (vcons true (vcons true
#    (vcons true (vcons true (vcons true (vcons true (vcons true (vcons true
#    (vcons true (vcons true (vcons true (vcons true (vcons true (vcons true
#    (vcons true (vcons true (vcons true (vcons true (vcons true (vcons true
#    (vcons true (vcons true (vcons true (vcons true (vcons true (vcons true
#    (vcons true (vcons true (vcons true (vcons true (vcons true (vcons true
#    (vcons true (vcons true (vcons true (vcons true (vcons true (vcons true
#    (vcons true (vcons true
#    (vcons true (vcons true (vcons true (vcons true (vcons true (vcons true
#    (vcons true (vcons true (vcons true (vcons true (vcons true (vcons true
#    (vcons true (vcons true (vcons true (vcons true (vcons true (vcons true
#    (vcons true (vcons true (vcons true (vcons true (vcons true (vcons true
#    (vcons true (vcons true (vcons true (vcons true (vcons true (vcons true
#    (vcons true (vcons true (vcons true (vcons true (vcons true (vcons true
#    (vcons true (vcons true (vcons true (vcons true (vcons true (vcons true
#    (vcons true (vcons true (vcons true (vcons true (vcons true (vcons true
#    (vcons true (vcons true (vcons true (vcons true (vcons true (vcons true
#    (vcons true (vcons true (vcons true (vcons true (vcons true (vcons true
#    (vcons true (vcons true (vcons true (vcons true (vcons true (vcons true
#    (vcons true (vcons true (vcons true (vcons true (vcons true (vcons true
#    (vcons true (vcons true (vcons true (vcons true (vcons true (vcons true
#    (vcons true (vcons true (vcons true (vcons true (vcons true (vcons true
#    (vcons true (vcons true (vcons true (vcons true (vcons true (vcons true
#    (vcons true (vcons true (vcons true (vcons true (vcons true (vcons true
#    (vcons true (vcons true (vcons true (vcons true (vcons true (vcons true
#    (vcons true (vcons true (vcons true (vcons true (vcons true (vcons true
#    (vcons true (vcons true (vcons true (vcons true (vcons true (vcons true
#    (vcons true (vcons true (vcons true (vcons true (vcons true (vcons true
#    (vcons true (vcons true (vcons true (vcons true (vcons true (vcons true
#    (vcons true (vcons true
#    (vcons true (vcons true (vcons true (vcons true (vcons true (vcons true
#    (vcons true (vcons true (vcons true (vcons true (vcons true (vcons true
#    (vcons true (vcons true (vcons true (vcons true (vcons true (vcons true
#    (vcons true (vcons true (vcons true (vcons true (vcons true (vcons true
#    (vcons true (vcons true (vcons true (vcons true (vcons true (vcons true
#    (vcons true (vcons true (vcons true (vcons true (vcons true (vcons true
#    (vcons true (vcons true (vcons true (vcons true (vcons true (vcons true
#    (vcons true (vcons true (vcons true (vcons true (vcons true (vcons true
#    (vcons true (vcons true (vcons true (vcons true (vcons true (vcons true
#    (vcons true (vcons true (vcons true (vcons true (vcons true (vcons true
#    (vcons true (vcons true (vcons true (vcons true (vcons true (vcons true
#    (vcons true (vcons true (vcons true (vcons true (vcons true (vcons true
#    (vcons true (vcons true (vcons true (vcons true (vcons true (vcons true
#    (vcons true (vcons true (vcons true (vcons true (vcons true (vcons true
#    (vcons true (vcons true (vcons true (vcons true (vcons true (vcons true
#    (vcons true (vcons true (vcons true (vcons true (vcons true (vcons true
#    (vcons true (vcons true (vcons true (vcons true (vcons true (vcons true
#    (vcons true (vcons true (vcons true (vcons true (vcons true (vcons true
#    (vcons true (vcons true (vcons true (vcons true (vcons true (vcons true
#    (vcons true (vcons true (vcons true (vcons true (vcons true (vcons true
#    (vcons true (vcons true (vcons true (vcons true (vcons true (vcons true
#    (vcons true (vcons true
#    (vcons true (vcons true (vcons true (vcons true (vcons true (vcons true
#    (vcons true (vcons true (vcons true (vcons true (vcons true (vcons true
#    (vcons true (vcons true (vcons true (vcons true (vcons true (vcons true
#    (vcons true (vcons true (vcons true (vcons true (vcons true (vcons true
#    (vcons true (vcons true (vcons true (vcons true (vcons true (vcons true
#    (vcons true (vcons true (vcons true (vcons true (vcons true (vcons true
#    (vcons true (vcons true (vcons true (vcons true (vcons true (vcons true
#    (vcons true (vcons true (vcons true (vcons true (vcons true (vcons true
#    (vcons true (vcons true (vcons true (vcons true (vcons true (vcons true
#    (vcons true (vcons true (vcons true (vcons true (vcons true (vcons true
#    (vcons true (vcons true (vcons true (vcons true (vcons true (vcons true
#    (vcons true (vcons true (vcons true (vcons true (vcons true (vcons true
#    (vcons true (vcons true (vcons true (vcons true (vcons true (vcons true
#    (vcons true (vcons true (vcons true (vcons true (vcons true (vcons true
#    (vcons true (vcons true (vcons true (vcons true (vcons true (vcons true
#    (vcons true (vcons true (vcons true (vcons true (vcons true (vcons true
#    (vcons true (vcons true (vcons true (vcons true (vcons true (vcons true
#    (vcons true (vcons true (vcons true (vcons true (vcons true (vcons true
#    (vcons true (vcons true (vcons true (vcons true (vcons true (vcons true
#    (vcons true (vcons true (vcons true (vcons true (vcons true (vcons true
#    (vcons true (vcons true (vcons true (vcons true (vcons true (vcons true
#    (vcons true (vcons true
#    vnil)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
#    )))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
#    )))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
#    )))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
#    )))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
#    )))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
#    )))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
#    )))))))))))))))))))

# Leibniz (Church) propositional equality, useful for testing conversion.
# Also note the implicit lambdas.
# ----------------------------------------------------------------------------------
val Eq : [A] -> A -> A -> Type
  = [A] x y => (P : A -> Type) -> P x -> P y

val refl : [A][x : A] -> Eq x x
  = P px => px

val trans : [A][x y z : A] -> Eq x y -> Eq y z -> Eq x z
  = p q => q _ p

val sym : [A][x y : A] -> Eq x y -> Eq y x
  = [_ x y] p => p (y => Eq y x) refl

val ap : [A B](f : A -> B)[x y : A] -> Eq x y -> Eq (f x) (f y)
  = f [x y:_] p => p (y => Eq (f x) (f y)) refl

# Pairs, Top, Bot
# --------------------------------------------------------------------------------
val Pair : Type -> Type -> Type
  = A B => (Pair : Type)(pair : A -> B -> Pair) -> Pair

val pair : [A B] -> A -> B -> Pair A B
  = a b Pair pair => pair a b

val proj1 : [A B] -> Pair A B -> A
  = p => p _ (x y => x)

val proj2 : [A B] -> Pair A B -> B
  = p => p _ (x y => y)

val Top : Type
  = (Top : Type)(tt : Top) -> Top

val tt : Top
  = Top tt => tt

val Bot : Type
  = (Bot : Type) -> Bot

# Dependent function composition (higher-order unification example)
# --------------------------------------------------------------------------------

val comp :
    [A]
    [B : A -> Type]
    [C : [a] -> B a -> Type]
    (f : [a](b : B a) -> C b)
    (g : (a : A) -> B a)
    (x : A)
    -> C (g x)
  = f g a => f (g a)

val compTest1 : Nat -> Nat
  = comp suc suc

val compTest2 : [m A] -> A -> Vec A m -> Vec A (suc (suc m))
  = a => comp (vcons a) (vcons a)

# Some stress tests
# --------------------------------------------------------------------------------

# computing an N-sized function type for testing purposes
val nfun : Nat -> Type
  = n => n Type (A => Type -> A) Type

# Tests for approximate equality, i.e. the ability to tell terms equal
# without fully reducing them.

# smalltt : approx check succeeds
# Coq     : approx check succeeds
# Agda    : approx check fails
# Pika    : approx check succeeds
@[elaborate]
val synEqTest1 : nfun n10k -> nfun n10k = x => x

# Coq     : approx check succeeds
# Agda    : approx check succeeds
# smalltt : approx check fails
# Pika    : approx check succeeds
@[elaborate]
val synEqTest2 : Eq n1M n1M = refl

# I'm not doing anything special to get the second one to succeed, which I think means Pika misses out on possible solutions in some cases.
# I don't think it's much of a problem, though.

# Classic examples for exponential-time Hindley-Milner checking.
# --------------------------------------------------------------------------------

# Suprisingly, Agda-2018-sept manages the following fine, although in 2018-jan
# it also failed.

# smalltt: instant
# Agda   : instant
# Coq    : doesn't finish
# -------------------------
# smalltt : 73µs
# Pika    : doesn't finish
# @[elaborate]
# val idStress : [A] -> A -> A
# = id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id

# TODO let
# smalltt : 1.55s
# Agda    : doesn't finish
# Coq     : doesn't finish
# ---------------------------
# smalltt : 2.6s
# Pika    : 20s
# @[elaborate]
# val pairStress : Top = do
#   val x0  = pair tt  tt
#   val x1  = pair x0  x0
#   val x2  = pair x1  x1
#   val x3  = pair x2  x2
#   val x4  = pair x3  x3
#   val x5  = pair x4  x4
#   val x6  = pair x5  x5
#   val x7  = pair x6  x6
#   val x8  = pair x7  x7
#   val x9  = pair x8  x8
#   val x10 = pair x9  x9
#   val x11 = pair x10 x10
#   val x12 = pair x11 x11
#   val x13 = pair x12 x12
#   val x14 = pair x13 x13
#   val x15 = pair x14 x14
#   val x16 = pair x15 x15
#   val x17 = pair x16 x16
#   val x18 = pair x17 x17
#   val x19 = pair x18 x18
#   val x20 = pair x19 x19
#   tt
#  end

# Raw compute performance
# --------------------------------------------------------------------------------

# A simple way to force a Church Nat.
val forceNat : Nat -> Bool
  = n => n _ (x => x) true


# Note: [normalize] prints normalization time for definition on load

# smalltt :  10ms
# Pika    : 440ms (with `ulimit -s 65536`, i.e. 64MB stack, otherwise stack overflow)
# @[normalize]
val compute100k = forceNat n100k

# GHC -O2 -fllvm            : 14ms   , 0 MB
# Coq (Eval vm_compute)     : 0.23s  , 82 MB
# smalltt                   : 0.53s  , 6.3 MB
# runghc                    : 1.1s   , 22 MB
# Coq (Eval cbv)            : 1.1s   , 270 MB
# Coq (Eval lazy)           : 2.8s   , 290 MB
# Agda                      : ~5.5s  , ~635 MB
# Coq (Eval native_compute) : compilation failure
# Pika                      : stack overflow
# @[normalize]
val compute10M  = forceNat n10M

# Lazy/call-by-need evaluation
# --------------------------------------------------------------------------------

# smalltt         : instantly normalized
# Agda            : instantly normalized
# Coq (Eval lazy) : instantly normalized
# Pika            : instantly normalized
@[normalize]
val lazyU = const Type (forceNat n10M)

# TODO local definitions
# call-by-need local definitions
# local cbn works if "localCBN n10" runs roughly as fast as
# "forceNat (mul n10 n100k)"
# val localCBN : Nat -> Bool = \ n. let m = forceNat (mul n n100k) in
#         n _ (λ b. and m b) true


# smalltt         : local cbn works
# Coq (Eval lazy) : local cbn works
# Agda            : local cbn works
# cbnReference [normalize] = forceNat (mul n10 n100k)
# localCBNtest [normalize] = localCBN n10

# TODO conversion checking examples

# Church-coded simply typed lambda calculus
# --------------------------------------------------------------------------------

val Ty : Type
  = (Ty  : Type)
    (l: Ty)
    (fn : Ty -> Ty -> Ty)
  -> Ty

val l : Ty
  = _ l _ => l

val fn : Ty -> Ty -> Ty
  = A B Ty l fn => fn (A Ty l fn) (B Ty l fn)

val Con : Type
  = (Con : Type)
    (nil  : Con)
    (cons : Con -> Ty -> Con)
  -> Con

val nil : Con
  = Con nil cons => nil

val cons : Con -> Ty -> Con
  = P A Con nil cons => cons (P Con nil cons) A

val Var : Con -> Ty -> Type
  = P A =>
    (Var : Con -> Ty -> Type)
    (vz  : [P A] -> Var (cons P A) A)
    (vs  : [P B A] -> Var P A -> Var (cons P B) A)
  -> Var P A

val vz : [P A] -> Var (cons P A) A
  = Var vz vs => vz

val vs : [P B A] -> Var P A -> Var (cons P B) A
  = x Var vz vs => vs (x Var vz vs)

val Tm : Con -> Ty -> Type
  = P A =>
    (Tm  : Con -> Ty -> Type)
    (var : [P A] -> Var P A -> Tm P A)
    (lam : [P A B] -> Tm (cons P A) B -> Tm P (fn A B))
    (app : [P A B] -> Tm P (fn A B) -> Tm P A -> Tm P B)
  -> Tm P A

val var : [P A] -> Var P A -> Tm P A
  = x Tm var lam app => var x

val lam : [P A B] -> Tm (cons P A) B -> Tm P (fn A B)
  = t Tm var lam app => lam (t Tm var lam app)

val app : [P A B] -> Tm P (fn A B) -> Tm P A -> Tm P B
  = t u Tm var lam app => app (t Tm var lam app) (u Tm var lam app)

# Well-typed interpreter for Church-coded STLC
# --------------------------------------------------------------------------------

val EvalTy : Ty -> Type
  = A => A _ Bot (A B => A -> B)

val EvalCon : Con -> Type
  = P => P _ Top (D A => Pair D (EvalTy A))

val EvalVar : [P A] -> Var P A -> EvalCon P -> EvalTy A
  = x => (x
           (P A => EvalCon P -> EvalTy A)
           (env => proj2 env)
           (rec env => rec (proj1 env)))

val EvalTm : [P A] -> Tm P A -> EvalCon P -> EvalTy A
  = t => (t
            (P A => EvalCon P -> EvalTy A) EvalVar
            (t env a => t (pair env a))
            (t u env => t env (u env)))

# TODO STLCStress
